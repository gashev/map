#!/usr/bin/python

import json
import os
import os.path
import sys

configFile = os. environ['HOME'] + '/.map'

commands = {
    'add' : 'add item to list',
    'delete': 'delete item from list',
    'destroy': 'destroy list',
    'export': 'export to bash code',
    'show': 'show details from list'
}

def add(data, args):
    name = args[2]
    if name not in data:
        data[name] = []
    values = args[3:]
    for value in values:
        if value not in data[name]:
            data[name].append(value)
    print(' '.join(data[name]))

def delete(data, args):
    name = args[2]
    if name not in data:
        return

    values = args[3:]
    for value in values:
        if value in data[name]:
            data[name].remove(value)

    print(' '.join(data[name]))

def destroy(data, args):
    name = args[2]
    if name in data:
        data.pop(name)

def export(data):
    for key in data:
        print("declare -x %s=\"%s\"" % (key, ' '.join(data[key])))

def help():
    print("\nUsage: map <command> <list> [<item>] ...")
    print("\nPaths mapping tool.")
    print("\nCommands:")

    commandNames = sorted(commands.keys())
    for command in commandNames:
        print('  %-12s%s' % (command, commands[command]))

def readConfig():
    data = {}
    if os.path.exists(configFile):
        data = json.load(open(configFile))

    return data

def writeConfig(data):
    with open(configFile, 'wt') as outfile:
        json.dump(data, outfile, sort_keys=True, indent=4, separators=(',', ': '))

def main():
    command = sys.argv[1]
    name = None
    if len(sys.argv) > 2:
        name = sys.argv[2]
    value = None
    if len(sys.argv) == 4:
        value = sys.argv[3]

    data = readConfig()

    if command == 'add':
        add(data, sys.argv)

    if command == 'delete':
        delete(data, sys.argv)

    if command == 'destroy':
        destroy(data, sys.argv)

    if command == 'show':
        print(' '.join(data[name]))

    if command == 'export':
        export(data)

    if command == 'help':
        help()

    writeConfig(data)

if __name__== "__main__":
    main()
